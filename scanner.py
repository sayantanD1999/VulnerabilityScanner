import requests
import re
from urlparse import urlparse
from urlparse import urljoin
from bs4 import BeautifulSoup

class Scanner:
    def __init__(self,url,ignore_links):
        print("Running")
        self.session = requests.Session()#creating session 
        self.target_url=url
        self.target_links = []
        self.links_to_ignore = ignore_links
    def extract_links_from(self,url):
        print("1")
        response = self.session.get(url)
        return re.findall('(?:href=")(.*?)"',response.content)

    def crawl(self,url=None):
        print("2")
        if url == None:#when the function is called outside the class i.e when no url is provided
            url = self.target_url
        href_links = self.extract_links_from(url)
        for link in href_links:
            link = urljoin(url,link)#resolves path issues of the page

            if "#" in link:
                link = link.split("#")[0]

            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                print(link)
                self.crawl(link)

    def extract_forms(self, url):
        print("3")
        response = self.session.get(url)#through session
        parsed_html = BeautifulSoup(response.content,features="html.parser")#helps to find html elements
        return parsed_html.findAll("form")#html tag to be searched

    def submit_form(self, form, value, url):
        print("4")
        action = form.get("action")#getting attributes of form to be submitted
        post_url = urlparse.urljoin(url, action) 
        method = form.get("method")#getting attributes of form to be submitted

        inputs_list = form.findAll("input")#inputs are not attribute but a part of it so findAll is used
        post_data = {}
        for input in inputs_list:
            input_name = input.get("name")#getting attributes
            input_type = input.get("type")#getting attributes
            input_value = input.get("value")#getting attributes
            if input_type == "text":
                input_value = value #to fill it with payloads

            post_data[input_name] = input_value #filling post data
        #submitting the form
        if method == "post":
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    def run_scanner(self):
        print("5")
        #iterate through each link and discover all forms 
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print("[+] Testing form in " + link)
                #testing forms
                is_vulnerable_to_xss = self.test_xss_in_form(form,link)
                if is_vulnerable_to_xss:
                    print("\n\n[***] XSS discoverd in " + link + " in the following form")
                    print(form)
            if "=" in link:
                print("[+] Testing " + link)
                #testing links
                is_vulnerable_to_xss = self.test_xss_in_link(link)
                if is_vulnerable_to_xss:
                    print("[***] Discovered XSS in " + link)

                
    def test_xss_in_link(self, url):
        print("6")
        xss_test_script = "<sCript>alert('test')</scriPt>"
        url = url.replace("=","=" + xss_test_script)
        response = self.session.get(url)
        if xss_test_script in response.content:
            #response.content is the html code of the content
            return True


    def test_xss_in_form(self,form,url):
        print("7")
        xcc_test_script = "<sCript>alert('test')</scriPt>"
        response = self.submit_form(form, xss_test_script, url)
        if xss_test_script in response.content:
            #response.content is the html code of the content
            return True

            
